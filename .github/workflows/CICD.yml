name: Industrialisation continue sur le serveur Alwaysdata
on: 
  push:
    branches:
      - main
jobs:
  Connexion:
    runs-on: ubuntu-latest
    steps:
      - name: Connexion SSH avec le serveur
        uses: appleboy/ssh-action@master
        with:
          host: "ssh-${{ secrets.USERNAME }}.alwaysdata.net"
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            cd $HOME/www/
  Copy:
    needs: Connexion
    runs-on: ubuntu-latest
    steps:
      - name: Connexion SSH avec le serveur
        uses: appleboy/ssh-action@master
        with:
          host: "ssh-${{ secrets.USERNAME }}.alwaysdata.net"
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            last_directory=$(basename ${{ runner.workspace }})
            cd $HOME/www/
            git clone https://github.com/${{ github.repository }}.git
            # Vérifier si le répertoire de destination existe
            if [ "$(ls -A ./flask)" ]; then
              rsync -r ./$last_directory/ ./flask
              rm -rf ./$last_directory
            else
              echo "Le répertoire flask de destination sur votre serveur n'existe pas"
              # mkdir flask
              # rsync -r ./$last_directory/ ./flask
              # rm -rf ./$last_directory
              exit 1
            fi
  NextStep:
    needs: Copy
    runs-on: ubuntu-latest
    steps:
      - name: Build and deploy home template
        run: |
          cd $HOME/www/flask/templates/home
          npm install
          npm run build

          # Vérifier si le répertoire www existe et le nettoyer
            if [ -d "./www/out" ]; then
              # Supprimer tous les fichiers et répertoires sauf 'out/'

              # find ./www/cv ! -name 'out' -type f -exec rm -f {} +
              # find ./www/cv ! -name 'out' -type d -exec rm -rf {} +

              echo "Contenu de www/ nettoyé, préparation du transfert..."

              # Utiliser rsync pour transférer uniquement le contenu du dossier 'out'

              # rsync -av --delete $HOME/${last_directory}/out/ ./www/cv

              # rm -rf ./cv_cnam

              echo "Déploiement terminé."

            else
              echo "Le répertoire www/cv n'existe pas sur le serveur."
              exit 1
              # mkdir -p ./www/cv
            fi

  Restart:
    needs: Copy
    runs-on: ubuntu-latest
    steps:
      - name: Restart Alwaysdata site
        run: |
          response_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST --basic --user "${{ secrets.ALWAYSDATA_TOKEN }}:" https://api.alwaysdata.com/v1/site/${{ secrets.ALWAYSDATA_SITE_ID }}/restart/)
          # Vérifier le code de réponse HTTP
          if [ "$response_code" -eq 204 ]; then
            echo "Relance de votre site réussi"
          elif [ "$response_code" -eq 404 ]; then
            echo "Vous n'avez pas renseigner correctement votre secret ALWAYSDATA_SITE_ID"
            exit 1  # Quitter avec un code d'erreur
          elif [ "$response_code" -eq 401 ]; then
            echo "Vous n'avez pas renseigner correctement votre secret ALWAYSDATA_TOKEN"
          exit 1  # Quitter avec un code d'erreur
          else
            echo "Échec du redémarrage avec le code de réponse : $response_code"
            exit 1  # Quitter avec un code d'erreur
          fi
